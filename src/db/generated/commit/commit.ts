// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import {IndexRecord} from '../commit/index-record';
import {Meta} from '../commit/meta';

export class Commit {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): Commit {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsCommit(bb: flatbuffers.ByteBuffer, obj?: Commit): Commit {
    return (obj || new Commit()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  static getSizePrefixedRootAsCommit(
    bb: flatbuffers.ByteBuffer,
    obj?: Commit,
  ): Commit {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new Commit()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  meta(obj?: Meta): Meta | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? (obj || new Meta()).__init(
          this.bb!.__indirect(this.bb_pos + offset),
          this.bb!,
        )
      : null;
  }

  valueHash(): string | null;
  valueHash(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  valueHash(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  indexes(index: number, obj?: IndexRecord): IndexRecord | null {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset
      ? (obj || new IndexRecord()).__init(
          this.bb!.__indirect(
            this.bb!.__vector(this.bb_pos + offset) + index * 4,
          ),
          this.bb!,
        )
      : null;
  }

  indexesLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  static startCommit(builder: flatbuffers.Builder) {
    builder.startObject(3);
  }

  static addMeta(builder: flatbuffers.Builder, metaOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, metaOffset, 0);
  }

  static addValueHash(
    builder: flatbuffers.Builder,
    valueHashOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(1, valueHashOffset, 0);
  }

  static addIndexes(
    builder: flatbuffers.Builder,
    indexesOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(2, indexesOffset, 0);
  }

  static createIndexesVector(
    builder: flatbuffers.Builder,
    data: flatbuffers.Offset[],
  ): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!);
    }
    return builder.endVector();
  }

  static startIndexesVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4);
  }

  static endCommit(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static finishCommitBuffer(
    builder: flatbuffers.Builder,
    offset: flatbuffers.Offset,
  ) {
    builder.finish(offset);
  }

  static finishSizePrefixedCommitBuffer(
    builder: flatbuffers.Builder,
    offset: flatbuffers.Offset,
  ) {
    builder.finish(offset, undefined, true);
  }

  static createCommit(
    builder: flatbuffers.Builder,
    metaOffset: flatbuffers.Offset,
    valueHashOffset: flatbuffers.Offset,
    indexesOffset: flatbuffers.Offset,
  ): flatbuffers.Offset {
    Commit.startCommit(builder);
    Commit.addMeta(builder, metaOffset);
    Commit.addValueHash(builder, valueHashOffset);
    Commit.addIndexes(builder, indexesOffset);
    return Commit.endCommit(builder);
  }
}
