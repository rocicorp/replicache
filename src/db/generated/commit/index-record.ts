// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import {IndexDefinition} from '../commit/index-definition';

export class IndexRecord {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): IndexRecord {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsIndexRecord(
    bb: flatbuffers.ByteBuffer,
    obj?: IndexRecord,
  ): IndexRecord {
    return (obj || new IndexRecord()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  static getSizePrefixedRootAsIndexRecord(
    bb: flatbuffers.ByteBuffer,
    obj?: IndexRecord,
  ): IndexRecord {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new IndexRecord()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  definition(obj?: IndexDefinition): IndexDefinition | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? (obj || new IndexDefinition()).__init(
          this.bb!.__indirect(this.bb_pos + offset),
          this.bb!,
        )
      : null;
  }

  valueHash(): string | null;
  valueHash(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  valueHash(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  static startIndexRecord(builder: flatbuffers.Builder) {
    builder.startObject(2);
  }

  static addDefinition(
    builder: flatbuffers.Builder,
    definitionOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(0, definitionOffset, 0);
  }

  static addValueHash(
    builder: flatbuffers.Builder,
    valueHashOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(1, valueHashOffset, 0);
  }

  static endIndexRecord(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createIndexRecord(
    builder: flatbuffers.Builder,
    definitionOffset: flatbuffers.Offset,
    valueHashOffset: flatbuffers.Offset,
  ): flatbuffers.Offset {
    IndexRecord.startIndexRecord(builder);
    IndexRecord.addDefinition(builder, definitionOffset);
    IndexRecord.addValueHash(builder, valueHashOffset);
    return IndexRecord.endIndexRecord(builder);
  }
}
