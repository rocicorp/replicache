// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class LocalMeta {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): LocalMeta {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsLocalMeta(
    bb: flatbuffers.ByteBuffer,
    obj?: LocalMeta,
  ): LocalMeta {
    return (obj || new LocalMeta()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  static getSizePrefixedRootAsLocalMeta(
    bb: flatbuffers.ByteBuffer,
    obj?: LocalMeta,
  ): LocalMeta {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new LocalMeta()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  mutationId(): flatbuffers.Long {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? this.bb!.readUint64(this.bb_pos + offset)
      : this.bb!.createLong(0, 0);
  }

  mutatorName(): string | null;
  mutatorName(
    optionalEncoding: flatbuffers.Encoding,
  ): string | Uint8Array | null;
  mutatorName(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  mutatorArgsJson(index: number): number | null {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset
      ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index)
      : 0;
  }

  mutatorArgsJsonLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  mutatorArgsJsonArray(): Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset
      ? new Uint8Array(
          this.bb!.bytes().buffer,
          this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),
          this.bb!.__vector_len(this.bb_pos + offset),
        )
      : null;
  }

  originalHash(): string | null;
  originalHash(
    optionalEncoding: flatbuffers.Encoding,
  ): string | Uint8Array | null;
  originalHash(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  static startLocalMeta(builder: flatbuffers.Builder) {
    builder.startObject(4);
  }

  static addMutationId(
    builder: flatbuffers.Builder,
    mutationId: flatbuffers.Long,
  ) {
    builder.addFieldInt64(0, mutationId, builder.createLong(0, 0));
  }

  static addMutatorName(
    builder: flatbuffers.Builder,
    mutatorNameOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(1, mutatorNameOffset, 0);
  }

  static addMutatorArgsJson(
    builder: flatbuffers.Builder,
    mutatorArgsJsonOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(2, mutatorArgsJsonOffset, 0);
  }

  static createMutatorArgsJsonVector(
    builder: flatbuffers.Builder,
    data: number[] | Uint8Array,
  ): flatbuffers.Offset {
    builder.startVector(1, data.length, 1);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addInt8(data[i]!);
    }
    return builder.endVector();
  }

  static startMutatorArgsJsonVector(
    builder: flatbuffers.Builder,
    numElems: number,
  ) {
    builder.startVector(1, numElems, 1);
  }

  static addOriginalHash(
    builder: flatbuffers.Builder,
    originalHashOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(3, originalHashOffset, 0);
  }

  static endLocalMeta(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createLocalMeta(
    builder: flatbuffers.Builder,
    mutationId: flatbuffers.Long,
    mutatorNameOffset: flatbuffers.Offset,
    mutatorArgsJsonOffset: flatbuffers.Offset,
    originalHashOffset: flatbuffers.Offset,
  ): flatbuffers.Offset {
    LocalMeta.startLocalMeta(builder);
    LocalMeta.addMutationId(builder, mutationId);
    LocalMeta.addMutatorName(builder, mutatorNameOffset);
    LocalMeta.addMutatorArgsJson(builder, mutatorArgsJsonOffset);
    LocalMeta.addOriginalHash(builder, originalHashOffset);
    return LocalMeta.endLocalMeta(builder);
  }
}
