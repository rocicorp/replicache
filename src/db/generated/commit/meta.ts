// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import {MetaTyped} from '../commit/meta-typed';

export class Meta {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): Meta {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsMeta(bb: flatbuffers.ByteBuffer, obj?: Meta): Meta {
    return (obj || new Meta()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  static getSizePrefixedRootAsMeta(
    bb: flatbuffers.ByteBuffer,
    obj?: Meta,
  ): Meta {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new Meta()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  basisHash(): string | null;
  basisHash(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  basisHash(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset
      ? this.bb!.__string(this.bb_pos + offset, optionalEncoding)
      : null;
  }

  typedType(): MetaTyped {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? this.bb!.readUint8(this.bb_pos + offset) : MetaTyped.NONE;
  }

  typed(obj: any): any | null {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
  }

  static startMeta(builder: flatbuffers.Builder) {
    builder.startObject(4);
  }

  static addBasisHash(
    builder: flatbuffers.Builder,
    basisHashOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(1, basisHashOffset, 0);
  }

  static addTypedType(builder: flatbuffers.Builder, typedType: MetaTyped) {
    builder.addFieldInt8(2, typedType, MetaTyped.NONE);
  }

  static addTyped(
    builder: flatbuffers.Builder,
    typedOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(3, typedOffset, 0);
  }

  static endMeta(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createMeta(
    builder: flatbuffers.Builder,
    basisHashOffset: flatbuffers.Offset,
    typedType: MetaTyped,
    typedOffset: flatbuffers.Offset,
  ): flatbuffers.Offset {
    Meta.startMeta(builder);
    Meta.addBasisHash(builder, basisHashOffset);
    Meta.addTypedType(builder, typedType);
    Meta.addTyped(builder, typedOffset);
    return Meta.endMeta(builder);
  }
}
