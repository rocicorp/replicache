// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import {LeafEntry} from '../leaf/leaf-entry';

export class Leaf {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): Leaf {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsLeaf(bb: flatbuffers.ByteBuffer, obj?: Leaf): Leaf {
    return (obj || new Leaf()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  static getSizePrefixedRootAsLeaf(
    bb: flatbuffers.ByteBuffer,
    obj?: Leaf,
  ): Leaf {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new Leaf()).__init(
      bb.readInt32(bb.position()) + bb.position(),
      bb,
    );
  }

  entries(index: number, obj?: LeafEntry): LeafEntry | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset
      ? (obj || new LeafEntry()).__init(
          this.bb!.__indirect(
            this.bb!.__vector(this.bb_pos + offset) + index * 4,
          ),
          this.bb!,
        )
      : null;
  }

  entriesLength(): number {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
  }

  static startLeaf(builder: flatbuffers.Builder) {
    builder.startObject(1);
  }

  static addEntries(
    builder: flatbuffers.Builder,
    entriesOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(0, entriesOffset, 0);
  }

  static createEntriesVector(
    builder: flatbuffers.Builder,
    data: flatbuffers.Offset[],
  ): flatbuffers.Offset {
    builder.startVector(4, data.length, 4);
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!);
    }
    return builder.endVector();
  }

  static startEntriesVector(builder: flatbuffers.Builder, numElems: number) {
    builder.startVector(4, numElems, 4);
  }

  static endLeaf(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static finishLeafBuffer(
    builder: flatbuffers.Builder,
    offset: flatbuffers.Offset,
  ) {
    builder.finish(offset);
  }

  static finishSizePrefixedLeafBuffer(
    builder: flatbuffers.Builder,
    offset: flatbuffers.Offset,
  ) {
    builder.finish(offset, undefined, true);
  }

  static createLeaf(
    builder: flatbuffers.Builder,
    entriesOffset: flatbuffers.Offset,
  ): flatbuffers.Offset {
    Leaf.startLeaf(builder);
    Leaf.addEntries(builder, entriesOffset);
    return Leaf.endLeaf(builder);
  }
}
